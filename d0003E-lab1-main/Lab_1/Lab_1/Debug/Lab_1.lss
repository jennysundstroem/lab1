
Lab_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000370  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000370  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3a  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aa7  00000000  00000000  0000123a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059d  00000000  00000000  00001ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004da  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000321  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002b8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 e7       	ldi	r30, 0x70	; 112
  70:	f3 e0       	ldi	r31, 0x03	; 3
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 31       	cpi	r26, 0x14	; 20
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	a4 e1       	ldi	r26, 0x14	; 20
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a4 31       	cpi	r26, 0x14	; 20
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  92:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:


void LCD_Init(void){
	/* Use 32 kHz crystal oscillator */
	/* 1/3 Bias and 1/4 duty, SEG0:SEG24 is used as port pins, external asynchronous clock source is used */
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) |(1<<LCDPM1) |(1<<LCDPM0) | (1<<LCDCS);
  9a:	87 eb       	ldi	r24, 0xB7	; 183
  9c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	
	/* Using 16 as pre-scaler selection and 8 as LCD Clock Divide */
	/* gives a frame rate of 49 Hz */
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	
	/* Set segment drive time to 300s and output voltage to 3.35 V*/
	LCDCCR = (0<<LCDDC0) | (0<<LCDDC1) | (0<<LCDDC2) | (1<<LCDCC3) | (1<<LCDCC0) | (1<<LCDCC1) | (1<<LCDCC2);
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/* Enable LCD, low power waveform and no frame interrupt enabled */
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  b2:	08 95       	ret

000000b4 <is_prime>:

//checks if number is a prime number

int is_prime(long i){
	int n = 2;
	while(n<i){
  b4:	63 30       	cpi	r22, 0x03	; 3
  b6:	71 05       	cpc	r23, r1
  b8:	81 05       	cpc	r24, r1
  ba:	91 05       	cpc	r25, r1
  bc:	e4 f0       	brlt	.+56     	; 0xf6 <is_prime+0x42>
  be:	dc 01       	movw	r26, r24
  c0:	cb 01       	movw	r24, r22
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	99 27       	eor	r25, r25
  c6:	aa 27       	eor	r26, r26
  c8:	b0 78       	andi	r27, 0x80	; 128
  ca:	bb 23       	and	r27, r27
  cc:	54 f4       	brge	.+20     	; 0xe2 <is_prime+0x2e>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	a1 09       	sbc	r26, r1
  d2:	b1 09       	sbc	r27, r1
  d4:	8e 6f       	ori	r24, 0xFE	; 254
  d6:	9f 6f       	ori	r25, 0xFF	; 255
  d8:	af 6f       	ori	r26, 0xFF	; 255
  da:	bf 6f       	ori	r27, 0xFF	; 255
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	a1 1d       	adc	r26, r1
  e0:	b1 1d       	adc	r27, r1
  e2:	31 e0       	ldi	r19, 0x01	; 1
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	89 2b       	or	r24, r25
  e8:	8a 2b       	or	r24, r26
  ea:	8b 2b       	or	r24, r27
  ec:	09 f4       	brne	.+2      	; 0xf0 <is_prime+0x3c>
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	83 2f       	mov	r24, r19
  f2:	92 2f       	mov	r25, r18
  f4:	08 95       	ret
			}else{
			n++;
		}
		return 1;
	}
}
  f6:	08 95       	ret

000000f8 <writeChar>:
	char bitmask;		
	int shift;
	int number = 0;				

						
	if ((pos >= 0) && (pos <= 5)){
  f8:	66 30       	cpi	r22, 0x06	; 6
  fa:	71 05       	cpc	r23, r1
  fc:	a0 f5       	brcc	.+104    	; 0x166 <writeChar+0x6e>
		
		int number = numbers[(int)i];			//retrieves which char to print from array 
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e0 56       	subi	r30, 0x60	; 96
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	40 81       	ld	r20, Z
 10c:	51 81       	ldd	r21, Z+1	; 0x01
		
		if (pos % 2 == 0) {						//if position is even no shift is made	
 10e:	60 ff       	sbrs	r22, 0
 110:	03 c0       	rjmp	.+6      	; 0x118 <writeChar+0x20>
			shift = 0;
			bitmask = 0xF0;						//saves 4 MSB of register
			
		}else{
			shift = 4;							//if position is odd shift 4
 112:	a4 e0       	ldi	r26, 0x04	; 4
			bitmask = 0x0F;						//saves 4 LSB of register
 114:	3f e0       	ldi	r19, 0x0F	; 15
 116:	02 c0       	rjmp	.+4      	; 0x11c <writeChar+0x24>
	if ((pos >= 0) && (pos <= 5)){
		
		int number = numbers[(int)i];			//retrieves which char to print from array 
		
		if (pos % 2 == 0) {						//if position is even no shift is made	
			shift = 0;
 118:	a0 e0       	ldi	r26, 0x00	; 0
			bitmask = 0xF0;						//saves 4 MSB of register
 11a:	30 ef       	ldi	r19, 0xF0	; 240
			bitmask = 0x0F;						//saves 4 LSB of register
		}
		
		
		//sets pointer to correct register 
		LCDDRX += (pos / 2);
 11c:	fb 01       	movw	r30, r22
 11e:	ff 23       	and	r31, r31
 120:	0c f4       	brge	.+2      	; 0x124 <writeChar+0x2c>
 122:	31 96       	adiw	r30, 0x01	; 1
 124:	f5 95       	asr	r31
 126:	e7 95       	ror	r30
 128:	e4 51       	subi	r30, 0x14	; 20
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	bf 01       	movw	r22, r30
 12e:	6c 5e       	subi	r22, 0xEC	; 236
 130:	7f 4f       	sbci	r23, 0xFF	; 255
		
		
		//for setting the four nibbles to corresponding character
		for(int i = 0; i < 4; i++) {
			*LCDDRX = ((*LCDDRX & bitmask) | (number & 0x0F) << shift);			// mask register or 4 LSB of character shifted accordingly		
 132:	80 81       	ld	r24, Z
 134:	23 2f       	mov	r18, r19
 136:	28 23       	and	r18, r24
 138:	ca 01       	movw	r24, r20
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	99 27       	eor	r25, r25
 13e:	0a 2e       	mov	r0, r26
 140:	02 c0       	rjmp	.+4      	; 0x146 <writeChar+0x4e>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <writeChar+0x4a>
 14a:	82 2b       	or	r24, r18
 14c:	80 83       	st	Z, r24
			number = (number >> 4);												// remove 4 LSB of character
 14e:	55 95       	asr	r21
 150:	47 95       	ror	r20
 152:	55 95       	asr	r21
 154:	47 95       	ror	r20
 156:	55 95       	asr	r21
 158:	47 95       	ror	r20
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
			LCDDRX += 5;														// set pointer to next register
 15e:	35 96       	adiw	r30, 0x05	; 5
		//sets pointer to correct register 
		LCDDRX += (pos / 2);
		
		
		//for setting the four nibbles to corresponding character
		for(int i = 0; i < 4; i++) {
 160:	6e 17       	cp	r22, r30
 162:	7f 07       	cpc	r23, r31
 164:	31 f7       	brne	.-52     	; 0x132 <writeChar+0x3a>
 166:	08 95       	ret

00000168 <writeLong>:
	}
}
	

//writes long characters correctly to display
void writeLong(long i){
 168:	8f 92       	push	r8
 16a:	9f 92       	push	r9
 16c:	af 92       	push	r10
 16e:	bf 92       	push	r11
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29

	int pos = 5;							//start at end - LSB 
	while(i > 0){							
 17c:	16 16       	cp	r1, r22
 17e:	17 06       	cpc	r1, r23
 180:	18 06       	cpc	r1, r24
 182:	19 06       	cpc	r1, r25
 184:	04 f5       	brge	.+64     	; 0x1c6 <writeLong+0x5e>
 186:	c5 e0       	ldi	r28, 0x05	; 5
 188:	d0 e0       	ldi	r29, 0x00	; 0
		writeChar((i % 10) + '0' , pos);	//writes character starting at LSB 
 18a:	0f 2e       	mov	r0, r31
 18c:	fa e0       	ldi	r31, 0x0A	; 10
 18e:	8f 2e       	mov	r8, r31
 190:	91 2c       	mov	r9, r1
 192:	a1 2c       	mov	r10, r1
 194:	b1 2c       	mov	r11, r1
 196:	f0 2d       	mov	r31, r0
 198:	a5 01       	movw	r20, r10
 19a:	94 01       	movw	r18, r8
 19c:	0e 94 75 01 	call	0x2ea	; 0x2ea <__divmodsi4>
 1a0:	e2 2e       	mov	r14, r18
 1a2:	f3 2e       	mov	r15, r19
 1a4:	04 2f       	mov	r16, r20
 1a6:	15 2f       	mov	r17, r21
 1a8:	86 2f       	mov	r24, r22
 1aa:	be 01       	movw	r22, r28
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeChar>
		pos--;								//switch to next position
 1b2:	21 97       	sbiw	r28, 0x01	; 1
		i = i / 10;							//cut off LSB
 1b4:	6e 2d       	mov	r22, r14
 1b6:	7f 2d       	mov	r23, r15
 1b8:	80 2f       	mov	r24, r16
 1ba:	91 2f       	mov	r25, r17

//writes long characters correctly to display
void writeLong(long i){

	int pos = 5;							//start at end - LSB 
	while(i > 0){							
 1bc:	16 16       	cp	r1, r22
 1be:	17 06       	cpc	r1, r23
 1c0:	18 06       	cpc	r1, r24
 1c2:	19 06       	cpc	r1, r25
 1c4:	4c f3       	brlt	.-46     	; 0x198 <writeLong+0x30>
		writeChar((i % 10) + '0' , pos);	//writes character starting at LSB 
		pos--;								//switch to next position
		i = i / 10;							//cut off LSB
	}
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	bf 90       	pop	r11
 1d4:	af 90       	pop	r10
 1d6:	9f 90       	pop	r9
 1d8:	8f 90       	pop	r8
 1da:	08 95       	ret

000001dc <main>:

//long test = 1234;

int main(void)
{
	CLKPR = 0x80;
 1dc:	e1 e6       	ldi	r30, 0x61	; 97
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	80 83       	st	Z, r24
	CLKPR = 0x00;
 1e4:	10 82       	st	Z, r1
	/*Replace with your application code */
	LCD_Init();
 1e6:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Init>
	while(1){
	
	//primes();
	//blink();
	//button();
	combine();
 1ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <combine>
 1ee:	fd cf       	rjmp	.-6      	; 0x1ea <main+0xe>

000001f0 <initpart4>:
#include <avr/io.h>
#include <stdint-gcc.h>

//initialization
void initpart4() {
	TCCR1B = (1<<CS12) | (0<<CS11) | (0<<CS10);
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	PORTB = PORTB | (1 << 7);
 1f6:	2f 9a       	sbi	0x05, 7	; 5
 1f8:	08 95       	ret

000001fa <combine>:

//primes, blink and button combined without interrupts 
void combine() {
	
	
	initpart4();
 1fa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <initpart4>
	uint16_t internalClock = 0;
	uint16_t blinkFlag = 0;
	uint16_t bitFlag = 0;
	uint16_t pressed = 0;
	
	long n = 2500000;
 1fe:	0f 2e       	mov	r0, r31
 200:	f0 ea       	ldi	r31, 0xA0	; 160
 202:	8f 2e       	mov	r8, r31
 204:	f5 e2       	ldi	r31, 0x25	; 37
 206:	9f 2e       	mov	r9, r31
 208:	f6 e2       	ldi	r31, 0x26	; 38
 20a:	af 2e       	mov	r10, r31
 20c:	b1 2c       	mov	r11, r1
 20e:	f0 2d       	mov	r31, r0

	uint16_t clockFactor = 8000000/256;
	uint16_t internalClock = 0;
	uint16_t blinkFlag = 0;
	uint16_t bitFlag = 0;
	uint16_t pressed = 0;
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
	
	initpart4();

	uint16_t clockFactor = 8000000/256;
	uint16_t internalClock = 0;
	uint16_t blinkFlag = 0;
 214:	00 e0       	ldi	r16, 0x00	; 0
 216:	10 e0       	ldi	r17, 0x00	; 0
	
	
	initpart4();

	uint16_t clockFactor = 8000000/256;
	uint16_t internalClock = 0;
 218:	e1 2c       	mov	r14, r1
 21a:	f1 2c       	mov	r15, r1
	
	if (is_prime(n)) {													//first print prime number
		writeLong(n);													
	}
	
	if(TCNT1 >= internalClock && blinkFlag == 0){						//before next prime number do blinking
 21c:	0f 2e       	mov	r0, r31
 21e:	f4 e8       	ldi	r31, 0x84	; 132
 220:	cf 2e       	mov	r12, r31
 222:	d1 2c       	mov	r13, r1
 224:	f0 2d       	mov	r31, r0
			
				clockFactor = ((clockFactor + clockFactor) - 0xFFFFF);
			}else{
				internalClock = (internalClock + clockFactor);
			}
			if (LCDDR8 != 0) {
 226:	0f 2e       	mov	r0, r31
 228:	f4 ef       	ldi	r31, 0xF4	; 244
 22a:	6f 2e       	mov	r6, r31
 22c:	71 2c       	mov	r7, r1
 22e:	f0 2d       	mov	r31, r0
					LCDDR8 = 0x0;
			}else {
					LCDDR8 = 0x1;
 230:	33 24       	eor	r3, r3
 232:	33 94       	inc	r3
				}
			}
	if (TCNT1 < internalClock){
		blinkFlag = 0;
 234:	21 2c       	mov	r2, r1

	uint16_t bitFlag = (PINB & (1<<7));									//before next prime number do joystick
	if (bitFlag == 0 && pressed == 0) {
		pressed = 1;
		
			if (LCDDR3 == 0)  {
 236:	0f 2e       	mov	r0, r31
 238:	ff ee       	ldi	r31, 0xEF	; 239
 23a:	4f 2e       	mov	r4, r31
 23c:	51 2c       	mov	r5, r1
 23e:	f0 2d       	mov	r31, r0
	long n = 2500000;
	
	while (1) {
	
	
	if (is_prime(n)) {													//first print prime number
 240:	c5 01       	movw	r24, r10
 242:	b4 01       	movw	r22, r8
 244:	0e 94 5a 00 	call	0xb4	; 0xb4 <is_prime>
 248:	89 2b       	or	r24, r25
 24a:	21 f0       	breq	.+8      	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
		writeLong(n);													
 24c:	c5 01       	movw	r24, r10
 24e:	b4 01       	movw	r22, r8
 250:	0e 94 b4 00 	call	0x168	; 0x168 <writeLong>
	}
	
	if(TCNT1 >= internalClock && blinkFlag == 0){						//before next prime number do blinking
 254:	f6 01       	movw	r30, r12
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	8e 15       	cp	r24, r14
 25c:	9f 05       	cpc	r25, r15
 25e:	98 f0       	brcs	.+38     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 260:	01 15       	cp	r16, r1
 262:	11 05       	cpc	r17, r1
 264:	81 f4       	brne	.+32     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
			
			if((internalClock + clockFactor) > 0xFFFFF){
			
				clockFactor = ((clockFactor + clockFactor) - 0xFFFFF);
			}else{
				internalClock = (internalClock + clockFactor);
 266:	fe ee       	ldi	r31, 0xEE	; 238
 268:	ef 1a       	sub	r14, r31
 26a:	f5 e8       	ldi	r31, 0x85	; 133
 26c:	ff 0a       	sbc	r15, r31
			}
			if (LCDDR8 != 0) {
 26e:	f3 01       	movw	r30, r6
 270:	80 81       	ld	r24, Z
 272:	88 23       	and	r24, r24
 274:	21 f0       	breq	.+8      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
					LCDDR8 = 0x0;
 276:	10 82       	st	Z, r1
	if (is_prime(n)) {													//first print prime number
		writeLong(n);													
	}
	
	if(TCNT1 >= internalClock && blinkFlag == 0){						//before next prime number do blinking
			blinkFlag = 1;
 278:	01 e0       	ldi	r16, 0x01	; 1
 27a:	10 e0       	ldi	r17, 0x00	; 0
 27c:	04 c0       	rjmp	.+8      	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
				internalClock = (internalClock + clockFactor);
			}
			if (LCDDR8 != 0) {
					LCDDR8 = 0x0;
			}else {
					LCDDR8 = 0x1;
 27e:	f3 01       	movw	r30, r6
 280:	30 82       	st	Z, r3
	if (is_prime(n)) {													//first print prime number
		writeLong(n);													
	}
	
	if(TCNT1 >= internalClock && blinkFlag == 0){						//before next prime number do blinking
			blinkFlag = 1;
 282:	01 e0       	ldi	r16, 0x01	; 1
 284:	10 e0       	ldi	r17, 0x00	; 0
					LCDDR8 = 0x0;
			}else {
					LCDDR8 = 0x1;
				}
			}
	if (TCNT1 < internalClock){
 286:	f6 01       	movw	r30, r12
 288:	80 81       	ld	r24, Z
 28a:	91 81       	ldd	r25, Z+1	; 0x01
 28c:	8e 15       	cp	r24, r14
 28e:	9f 05       	cpc	r25, r15
 290:	10 f4       	brcc	.+4      	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
		blinkFlag = 0;
 292:	02 2d       	mov	r16, r2
 294:	10 e0       	ldi	r17, 0x00	; 0
	}

	uint16_t bitFlag = (PINB & (1<<7));									//before next prime number do joystick
	if (bitFlag == 0 && pressed == 0) {
 296:	1f 99       	sbic	0x03, 7	; 3
 298:	1f c0       	rjmp	.+62     	; 0x2d8 <__EEPROM_REGION_LENGTH__+0xd8>
 29a:	20 97       	sbiw	r28, 0x00	; 0
 29c:	b1 f4       	brne	.+44     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
		pressed = 1;
		
			if (LCDDR3 == 0)  {
 29e:	f2 01       	movw	r30, r4
 2a0:	80 81       	ld	r24, Z
 2a2:	81 11       	cpse	r24, r1
 2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
				LCDDR3 =0x1;
 2a6:	30 82       	st	Z, r3
				LCDDR13 = 0x0;
 2a8:	e9 ef       	ldi	r30, 0xF9	; 249
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	10 82       	st	Z, r1
		blinkFlag = 0;
	}

	uint16_t bitFlag = (PINB & (1<<7));									//before next prime number do joystick
	if (bitFlag == 0 && pressed == 0) {
		pressed = 1;
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	cf 2f       	mov	r28, r31
 2b2:	d8 2f       	mov	r29, r24
 2b4:	14 c0       	rjmp	.+40     	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
			if (LCDDR3 == 0)  {
				LCDDR3 =0x1;
				LCDDR13 = 0x0;
				
			}else {
				LCDDR3 = 0x0;
 2b6:	f2 01       	movw	r30, r4
 2b8:	10 82       	st	Z, r1
				LCDDR13 = 0x1;
 2ba:	e9 ef       	ldi	r30, 0xF9	; 249
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	30 82       	st	Z, r3
		blinkFlag = 0;
	}

	uint16_t bitFlag = (PINB & (1<<7));									//before next prime number do joystick
	if (bitFlag == 0 && pressed == 0) {
		pressed = 1;
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	cf 2f       	mov	r28, r31
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	d8 2f       	mov	r29, r24
 2c8:	0a c0       	rjmp	.+20     	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
				
			}else {
				LCDDR3 = 0x0;
				LCDDR13 = 0x1;
			}
	}else if (bitFlag == 0 && pressed == 1) {
 2ca:	83 2d       	mov	r24, r3
 2cc:	21 97       	sbiw	r28, 0x01	; 1
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <__EEPROM_REGION_LENGTH__+0xd2>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
		blinkFlag = 0;
	}

	uint16_t bitFlag = (PINB & (1<<7));									//before next prime number do joystick
	if (bitFlag == 0 && pressed == 0) {
		pressed = 1;
 2d2:	c8 2f       	mov	r28, r24
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
				LCDDR13 = 0x1;
			}
	}else if (bitFlag == 0 && pressed == 1) {
				
	}else{
			pressed = 0;
 2d8:	c2 2d       	mov	r28, r2
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	df 2f       	mov	r29, r31
			}
		n++;															//increase number
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	88 1a       	sub	r8, r24
 2e2:	98 0a       	sbc	r9, r24
 2e4:	a8 0a       	sbc	r10, r24
 2e6:	b8 0a       	sbc	r11, r24
	}
 2e8:	ab cf       	rjmp	.-170    	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>

000002ea <__divmodsi4>:
 2ea:	05 2e       	mov	r0, r21
 2ec:	97 fb       	bst	r25, 7
 2ee:	1e f4       	brtc	.+6      	; 0x2f6 <__divmodsi4+0xc>
 2f0:	00 94       	com	r0
 2f2:	0e 94 8c 01 	call	0x318	; 0x318 <__negsi2>
 2f6:	57 fd       	sbrc	r21, 7
 2f8:	07 d0       	rcall	.+14     	; 0x308 <__divmodsi4_neg2>
 2fa:	0e 94 94 01 	call	0x328	; 0x328 <__udivmodsi4>
 2fe:	07 fc       	sbrc	r0, 7
 300:	03 d0       	rcall	.+6      	; 0x308 <__divmodsi4_neg2>
 302:	4e f4       	brtc	.+18     	; 0x316 <__divmodsi4_exit>
 304:	0c 94 8c 01 	jmp	0x318	; 0x318 <__negsi2>

00000308 <__divmodsi4_neg2>:
 308:	50 95       	com	r21
 30a:	40 95       	com	r20
 30c:	30 95       	com	r19
 30e:	21 95       	neg	r18
 310:	3f 4f       	sbci	r19, 0xFF	; 255
 312:	4f 4f       	sbci	r20, 0xFF	; 255
 314:	5f 4f       	sbci	r21, 0xFF	; 255

00000316 <__divmodsi4_exit>:
 316:	08 95       	ret

00000318 <__negsi2>:
 318:	90 95       	com	r25
 31a:	80 95       	com	r24
 31c:	70 95       	com	r23
 31e:	61 95       	neg	r22
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	8f 4f       	sbci	r24, 0xFF	; 255
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	08 95       	ret

00000328 <__udivmodsi4>:
 328:	a1 e2       	ldi	r26, 0x21	; 33
 32a:	1a 2e       	mov	r1, r26
 32c:	aa 1b       	sub	r26, r26
 32e:	bb 1b       	sub	r27, r27
 330:	fd 01       	movw	r30, r26
 332:	0d c0       	rjmp	.+26     	; 0x34e <__udivmodsi4_ep>

00000334 <__udivmodsi4_loop>:
 334:	aa 1f       	adc	r26, r26
 336:	bb 1f       	adc	r27, r27
 338:	ee 1f       	adc	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	a2 17       	cp	r26, r18
 33e:	b3 07       	cpc	r27, r19
 340:	e4 07       	cpc	r30, r20
 342:	f5 07       	cpc	r31, r21
 344:	20 f0       	brcs	.+8      	; 0x34e <__udivmodsi4_ep>
 346:	a2 1b       	sub	r26, r18
 348:	b3 0b       	sbc	r27, r19
 34a:	e4 0b       	sbc	r30, r20
 34c:	f5 0b       	sbc	r31, r21

0000034e <__udivmodsi4_ep>:
 34e:	66 1f       	adc	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	88 1f       	adc	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	1a 94       	dec	r1
 358:	69 f7       	brne	.-38     	; 0x334 <__udivmodsi4_loop>
 35a:	60 95       	com	r22
 35c:	70 95       	com	r23
 35e:	80 95       	com	r24
 360:	90 95       	com	r25
 362:	9b 01       	movw	r18, r22
 364:	ac 01       	movw	r20, r24
 366:	bd 01       	movw	r22, r26
 368:	cf 01       	movw	r24, r30
 36a:	08 95       	ret

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
